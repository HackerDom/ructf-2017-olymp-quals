#!/usr/bin/python3

# Start content from check.py

flag_len = 64
flag_hash = "LQRHQTIOENUDHSFAWCBWKLUVBHAGXMHFNFHGAWXGKIBOSVNPGWIOVPDLVMXCXHIC"
flag = "FLAGIUDVVHMKHFFLVWGMWHBGSQAIOUHKOPVQBHXNRANDECXXIXWNLHICGOCWTBPS"
length_byte_num = 73


def bwt(string, length):
	buffer = ''.join([string[i % length] for i in range(0, length * 2 - 1)])
	sorted = [i for i in range(0, length)]
	for i in range(0, length):
		for j in range(length - 1, i, -1):
			if buffer[sorted[j - 1]: sorted[j - 1] + length] > buffer[sorted[j]: sorted[j] + length]:
				tmp = sorted[j - 1]
				sorted[j - 1] = sorted[j]
				sorted[j] = tmp
	result = ''.join([buffer[sorted[i] + length - 1] for i in range(0, length)])
	return result


def string_rotations(string):
	return [string[i:] + string[0:i] for i in range(0, len(string))]


def check_full_transform(bytes):
	if len(bytes) < flag_len:
		return False
	rotations = string_rotations(flag)
	for r in rotations:
		founded = True
		for i in range(0, flag_len):
			if ord(r[i]) != bytes[i]:
				founded = False
				break
		if founded:
			if len(bytes) == flag_len:
				return True
			if bytes[flag_len] == ord('\r') or bytes[flag_len] == ord('\n'):
				return True
			if bytes[flag_len] == 0 and (len(bytes) < length_byte_num or bytes[length_byte_num - 1] == flag_len):
				return True
			return False
	return False


def check_partial_transform(bytes):
	zero_index = bytes.find(0)
	if not 0 < zero_index < flag_len:
		return False
	if len(bytes) < length_byte_num or bytes[length_byte_num - 1] != zero_index:
		return False
	string = ''.join([chr(bytes[i]) for i in range(0, zero_index)])
	bwt_result = bwt(string, zero_index)
	if flag_hash.startswith(bwt_result):
		return True
	return False


def check(bytes):
	if check_full_transform(bytes):
		return True
	if check_partial_transform(bytes):
		return True
	return False

# End content from check.py


import sys
import base64

ERR_OK = 0
ERR_UNKNOWN_METHOD = 1
ERR_CHECKER_ERROR = 2
ERR_WRONG_ANSWER = 3

CATEGORY = "reverse"
SCORE = 100
NAME = "Преобразование"
HTML = '''Изучите <a href="/static/6s4itfmuvi9tmzfsrgxcv95oc2oheqec/transform.exe">исполняемый файл</a>." + \
	" Флагом является последовательность байт, при передаче на вход исполняемому файлу которой в консоль печатается True," + \
	" закодированная base64.'''


def create_task():
	sys.stdout.write("ID: 1\nhtml{0}\n".format(HTML))


def check_answer(answer_base64):
	try:
		try:
			b = bytes(answer_base64, "ascii")
			answer = base64.b64decode(b)
		except TypeError:
			sys.exit(ERR_WRONG_ANSWER)
		if check(answer):
			sys.exit(ERR_OK)
		else:
			sys.exit(ERR_WRONG_ANSWER)
	except Exception as e:
		sys.stderr.write("Exception during checking answer: {0}\n".format(e))
		sys.exit(ERR_WRONG_ANSWER)


if __name__ == "__main__":
	method = sys.argv[1]

	if method == "id":
		sys.stdout.write("{0}:{1}\n".format(CATEGORY, SCORE))
	elif method == "series":
		print(CATEGORY)
	elif method == "name":
		print(NAME)
	elif method == "create":
		create_task()
	elif method == 'user':
		check_answer(sys.stdin.readline().strip())
	else:
		sys.stderr.write("Invalid method: {0}".format(method))
		exit(ERR_UNKNOWN_METHOD)
